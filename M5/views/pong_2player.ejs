<!DOCTYPE html>
<html>
<head>
  <title>Basic Pong HTML Game</title>
  <meta charset="UTF-8">
  <style>
  html, body {
    height: 100%;
    margin-top: 100;
  }

  body {
    background: blue;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .title {
        height: 50px;
        width: 50px;
        color: rgb(252, 252, 252);
        position: fixed;
        right: 50vw;
        margin-top: -75px;
      }

  .player_1_score {
        height: 50px;
        width: 50px;
        color: rgb(235, 245, 225);
        position: fixed;
        left: 30vw;
        margin-top: 30px;
      }
  
  .player_2_score {
    height: 50px;
    width: 50px;
    color: rgb(218, 230, 206);
    position: fixed;
    left: 70vw;
    margin-top: 30px;
  }
  </style>


</head>
<body>
  <div class="board">
    <h1 class = "player_1_score">0</h1>
    <h1 class="player_2_score">0</h1>
    <h1 class="title">SOFIA'S PONG</h1>

<canvas width="750" height="585" id="game"></canvas>
<script>

/*  EJS file for pong game
  Adapted from: 
  https://gist.github.com/straker/81b59eecf70da93af396f963596dfdc5,
  https://www.geeksforgeeks.org/pong-game-in-javascript/, 
  and M3 code

  by Sofia Gilardini (UID: 806095352) for ECE M119
*/


const canvas = document.getElementById('game');
const context = canvas.getContext('2d');
const grid = 15;
const paddleHeight = grid * 5; // 80
const maxPaddleY = canvas.height - grid - paddleHeight;

let score_1 = document.querySelector('.player_1_score');
let score_2 = document.querySelector('.player_2_score');

var paddleSpeed = 6;
var ballSpeed = 5;
var score = 0;

const leftPaddle = {
  // start in the middle of the game on the left side
  x: grid * 2,
  y: 0, // canvas.height / 2 - paddleHeight / 2,
  width: grid,
  height: paddleHeight,


  // paddle velocity
  dy: 0
};
const rightPaddle = {
  // start in the middle of the game on the right side
  x: canvas.width - grid * 3,
  y: canvas.height / 2 - paddleHeight / 2,
  width: grid,
  height: paddleHeight,

  // paddle velocity
  dy: 0
};
const ball = {
  // start in the middle of the game
  x: canvas.width / 2,
  y: canvas.height / 2,
  width: grid,
  height: grid,

  // keep track of when need to reset the ball position
  resetting: false,

  // ball velocity (start going to the top-right corner)
  dx: ballSpeed,
  dy: -ballSpeed
};

// check for collision between two objects using axis-aligned bounding box (AABB)
// @see https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection
function collides(obj1, obj2) {
  return obj1.x < obj2.x + obj2.width &&
         obj1.x + obj1.width > obj2.x &&
         obj1.y < obj2.y + obj2.height &&
         obj1.y + obj1.height > obj2.y;
}

// game loop
function loop() {
  requestAnimationFrame(loop);
  context.clearRect(0,0,canvas.width,canvas.height);

  // move paddles by their velocity
  leftPaddle.y += leftPaddle.dy;
  rightPaddle.y += rightPaddle.dy;

  // prevent paddles from going through walls
  if (leftPaddle.y < grid) {
    leftPaddle.y = grid;
  }
  else if (leftPaddle.y > maxPaddleY) {
    leftPaddle.y = maxPaddleY;
  }

  if (rightPaddle.y < grid) {
    rightPaddle.y = grid;
  }
  else if (rightPaddle.y > maxPaddleY) {
    rightPaddle.y = maxPaddleY;
  }

  // draw paddles
  context.fillStyle = 'white';
  context.fillRect(leftPaddle.x, leftPaddle.y, leftPaddle.width, leftPaddle.height);
  context.fillRect(rightPaddle.x, rightPaddle.y, rightPaddle.width, rightPaddle.height);

  // move ball by its velocity
  ball.x += ball.dx;
  ball.y += ball.dy;

  // prevent ball from going through walls by changing its velocity
  if (ball.y < grid) {
    ball.y = grid;
    ball.dy *= -1;
  }
  else if (ball.y + grid > canvas.height - grid) {
    ball.y = canvas.height - grid * 2;
    ball.dy *= -1;
  }

  // reset ball if it goes past paddle (but only if we haven't already done so)
  // add score to respective player
  if ( (ball.x < 0) && !ball.resetting) {
    ball.resetting = true;
    score_2.innerHTML = +score_2.innerHTML + 1;

    // give some time for the player to recover before launching the ball again
    setTimeout(() => {
      ball.resetting = false;
      ball.x = canvas.width / 2;
      ball.y = canvas.height / 2;
    }, 400);
  }

  if ( (ball.x > canvas.width) && !ball.resetting) {
    ball.resetting = true;
    score_1.innerHTML = +score_1.innerHTML + 1;

    // give some time for the player to recover before launching the ball again
    setTimeout(() => {
      ball.resetting = false;
      ball.x = canvas.width / 2;
      ball.y = canvas.height / 2;
    }, 400);
  }

  // check to see if ball collides with paddle. if they do change x velocity
  if (collides(ball, leftPaddle)) {
    ball.dx *= -1;

    // move ball next to the paddle otherwise the collision will happen again
    // in the next frame
    ball.x = leftPaddle.x + leftPaddle.width;
  }
  else if (collides(ball, rightPaddle)) {
    ball.dx *= -1;

    // move ball next to the paddle otherwise the collision will happen again
    // in the next frame
    ball.x = rightPaddle.x - ball.width;
  }

  // generate 'computer player' for left paddle. To toggle difficulty, change the value 40
  if (leftPaddle.y - ball.y > 40) {
    leftPaddle.dy = -paddleSpeed;
  }

  else if (leftPaddle.y - ball.y < -40) {
    leftPaddle.dy = paddleSpeed;
  }


  // draw ball
  context.fillRect(ball.x, ball.y, ball.width, ball.height);

  // draw walls
  context.fillStyle = 'lightgrey';
  context.fillRect(0, 0, canvas.width, grid);
  context.fillRect(0, canvas.height - grid, canvas.width, canvas.height);

  // draw dotted line down the middle
  for (let i = grid; i < canvas.height - grid; i += grid * 2) {
    context.fillRect(canvas.width / 2 - grid / 2, i, grid, grid);
  }
}


// start the game
requestAnimationFrame(loop);
</script>
<script src="https://d3js.org/d3.v7.min.js"></script>

<script type="application/javascript">

	const SERVERADDRESS = "http://127.0.0.1:3000"

	// use XML HTTP request to grab data from the server (central)
  let xmlhttp = new XMLHttpRequest()
	xmlhttp.onreadystatechange = function () {
		if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
			let responseText = xmlhttp.responseText
			//let sensorValue = parseFloat(JSON.parse(responseText).sensorValue)
      let sensorValue2 = parseFloat(JSON.parse(responseText).sensorValue2)


			// use d3 to visualize sensor value as the web page background color
			// let colorValue = Math.max(0, Math.min((sensorValue + 1) * 0.5, 1))
			// console.log(colorValue)
			// let color = "rgba(0, 0, 0, " + colorValue + ")"
			//d3.select("body").style("background-color", color)

      //console.log("SENSOR VALUE1: ",sensorValue)
      //console.log("SENSOR VALUE2: ",sensorValue2)
      
      if (sensorValue2 > 0) {
        rightPaddle.dy = paddleSpeed
      }
      else {
        rightPaddle.dy = -paddleSpeed
      }

		}
	}

	// periodically grab data
	let getData = () => {
		xmlhttp.open("POST", SERVERADDRESS, true)
		xmlhttp.setRequestHeader("Content-type", "application/json")
		xmlhttp.send("")
		setTimeout(() => {
			getData()
		}, 10)
	}

	getData()

</script>
</body>
</html>